/* Jai Gupta */
#include <iostream>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <map>
#include <cstdlib>
#include <algorithm>
#include <list>
#include <deque>
#include <bitset>
#include <cmath>
#include <functional>
#include <set>
#include <inttypes.h>
using namespace std;

#define INT_MAX 2147483647
#define INT_MIN -2147483648
#define uint unsigned int
#define MAX(a,b)   (((a)>(b))?(a):(b))
#define MIN(a,b)   (((a)<(b))?(a):(b))
#define CMAX(a,b)  if((a)<(b)) a=b
#define CMIN(a,b)  if((a)>(b)) a=b
#define FOR(i,a,b)   for(i=a; i<b; i++)
#define REVI(i,a,b)  for(int i= a ; i >= b ; --i)
#define LET(x,a)     __typeof(a) x(a)
#define IFOR(i,a,b)  for(LET(i,a);i!=(b);++i)
#define EACH(it,v)   IFOR(it,v.begin(),v.end())
#define SWAP(a,b,t)  t=a,a=b,b=t
#define REP(i,n)     for(uint i=0; i<n; i++)
#define ll           long long int
#define ull          unsigned long long int
#define gint(t)      scanf("%d", &t);
#define gint2(a,b)   scanf("%d%d", &a, &b);
#define gint3(a,b,c) scanf("%d%d%d", &a, &b, &c);
#define pint(t)      printf("%d\n", t);
#define pint2(a,b)   printf("%d %d\n", a, b);
#define pint3(a,b,c) printf("%d %d %d\n", a, b, c);
#define pii          pair<int, int>
#define debug(args...) {dbg,args; cerr<<endl;}
#define dline cerr<<endl
#define pb           push_back
#define nz(x)        ((x)?(x):(1))
struct debugger
{
    template<typename T> debugger& operator , (const T& v)
	{
	    cerr<<v<<" ";
	    return *this;
	}
} dbg;


class FastOutput {
public:
    FastOutput() {
	m_dataOffset = 0;
    }
    ~FastOutput() {
    }
 
    void Flush() {
	if (m_dataOffset) {
	    if (write(1, m_data, m_dataOffset));
	    m_dataOffset = 0;
	}
    }
    void PrintUint(uint32_t v, char d) {
	if (m_dataOffset + 11 > sizeof(m_data)) Flush();
	if (v < 100000) {
	    if (v < 1000) {
		if (v < 10) {
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 1;
		} else if (v < 100) {
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 2;
		} else {
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 3;
		}
	    } else {
		if (v < 10000) {
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 4;
		} else {
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 5;
		}
	    }
	} else {
	    if (v < 100000000) {
		if (v < 1000000) {
		    m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 6;
		} else if (v < 10000000) {
		    m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 7;
		} else {
		    m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 8;
		}
	    } else {
		if (v < 1000000000) {
		    m_data[m_dataOffset + 8] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 9;
		} else {
		    m_data[m_dataOffset + 9] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 8] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
		    m_data[m_dataOffset + 0] = v + 48;
		    m_dataOffset += 10;
		}
	    }
	}
	m_data[m_dataOffset++] = d;
    }
    void PrintChar(char d) {
	if (m_dataOffset + 1 > sizeof(m_data)) Flush();
	m_data[m_dataOffset++] = d;
    }
    void ReplaceChar(int offset, char d) {
	m_data[m_dataOffset + offset] = d;
    }
 
public:
    uint8_t m_data[32768];
    size_t m_dataOffset;
};



#define BUF 4096
char ibuf[BUF];
int ipt = BUF;
 


int readInt() {
    while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    if (ipt == BUF) {
	fread(ibuf, 1, BUF, stdin);
	ipt = 0;
	while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    }
    int n = 0;
    while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    if (ipt == BUF) {
	fread(ibuf, 1, BUF, stdin);
	ipt = 0;
	while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    }
    return n;
}


/* memset(start*, byteVal, numBytes);
 *  memcpy(dst*, src*, numBytes);
 */

uint under000(uint p, uint s, int c)
{
    if(c<=9) return c;
    uint cnt = 9;
    uint p1, p2, p3, p4, p5, p6, p7;
    uint s1, s2, s3, s4, s5, s6, s7;
    IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    if(p2%s2 == 0)
	    {
		//debug("wroked for", i1, i2, p2, s2);
		cnt++;
		if(c==cnt) return 10*i1+i2;
	    }
	}
    }
    
    IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		if(p3%s3 == 0)
		{
		    cnt++;
		    if(c==cnt) return 10*(10*(i1)+i2)+i3;
		}
	    }
	}
    }
    IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		IFOR(i4, 0, 10)
		{
		    p4 = p3*i4;
		    s4 = s3+i4;
		    if(p4%s4 == 0)
		    {
			cnt++;
			if(c==cnt) return 10*(10*(10*(i1)+i2)+i3)+i4;
		    }
		}
	    }
	}
    }
    

    IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		IFOR(i4, 0, 10)
		{
		    p4 = p3*i4;
		    s4 = s3+i4;
		    IFOR(i5, 0, 10)
		    {
			p5 = p4*i5;
			s5 = s4+i5;
			if(p5%s5 == 0)
			{
			    cnt++;
			    if(c==cnt) return 10*(10*(10*(10*(i1)+i2)+i3)+i4)+i5;
			}
		    }
		}
	    }
	}
    }

    IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		IFOR(i4, 0, 10)
		{
		    p4 = p3*i4;
		    s4 = s3+i4;
		    IFOR(i5, 0, 10)
		    {
			p5 = p4*i5;
			s5 = s4+i5;
			IFOR(i6, 0, 10)
			{
			    p6 = p5*i6;
			    s6 = s5+i6;
			    if(p6%s6 == 0)
			    {
				
				cnt++;
				if(c==cnt) return 10*(10*(10*(10*(10*(i1)+i2)+i3)+i4)+i5)+i6;
			    }
			}
		    }
		}
	    }
	}
    }

    
    /*IFOR(i1, 1, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		IFOR(i4, 0, 10)
		{
		    p4 = p3*i4;
		    s4 = s3+i4;
		    IFOR(i5, 0, 10)
		    {
			p5 = p4*i5;
			s5 = s4+i5;
			IFOR(i6, 0, 10)
			{
			    p6 = p5*i6;
			    s6 = s5+i6;
			    IFOR(i7, 0, 10)
			    {
				p7 = p6*i7;
				s7 = s6+i7;
				if(p7%s7 == 0)
				{
				    cnt++;
				    if(c==cnt) return 10*(10*(10*(10*(10*(10*(i1)+i2)+i3)+i4)+i5)+i6)+i7;
				}
			    }
			}
		    }
		}
	    }
	}
    }*/
    return cnt;
}

int above000(uint p, uint s, int c) {
    uint cnt = 0;
    uint p1, p2, p3, p4, p5, p6, p7;
    uint s1, s2, s3, s4, s5, s6, s7;
    
    if(p==0)
    {
	return c-1;
    }
    IFOR(i1, 0, 10)
    {
	p1 = i1*p;
	s1 = i1+s;
	IFOR(i2, 0, 10)
	{
	    p2 = p1*i2;
	    s2 = s1+i2;
	    IFOR(i3, 0, 10)
	    {
		p3 = p2*i3;
		s3 = s2+i3;
		IFOR(i4, 0, 10)
		{
		    p4 = p3*i4;
		    s4 = s3+i4;
		    IFOR(i5, 0, 10)
		    {
			p5 = p4*i5;
			s5 = s4+i5;
			IFOR(i6, 0, 10)
			{
			    p6 = p5*i6;
			    s6 = s5+i6;
			    if(p6%s6 == 0)
			    {
				
				cnt++;
				if(c==cnt) return 10*(10*(10*(10*(10*(i1)+i2)+i3)+i4)+i5)+i6;
			    }
			}
		    }
		}
	    }
	}
    }

    return cnt;
}

uint hash[] = {534357,1118255,1710151,2301356,2892673,3501975,4092976,4685242,5269113,5845531,6845531,7424998,8012894,8599799,9188585,9794705,10383103,10975370,11554907,12130748,13130748,13718644,14309961,14905010,15495091,16109889,16701330,17301954,17880545,18463923,19463923,20050828,20645877,21232717,21828687,22443382,23031676,23633724,24221945,24795186,25795186,26383972,26974053,27570023,28154560,28771927,29363036,29966693,30542203,31128599,32128599,32734719,33349517,33964212,34581579,35183804,35802625,36431794,37042547,37651025,38651025,39239423,39830864,40419158,41010267,41629088,42216864,42825362,43410374,43988394,44988394,45580661,46181285,46783333,47386990,48016159,48624657,49218643,49821259,50422158,51422158,52001695,52580286,53168507,53744017,54354770,54939782,55542398,56110828,56696848,57696848,58272689,58856067,59429308,60015704,60624182,61202202,61803101,62389121,62955906,63955906,64955906,65955906,66955906,67955906,68955906,69955906,70955906,71955906,72955906,73955906,74531176,75114817,75697002,76281136,76883254,77467894,78056498,78634152,79206544,80206544,80790185,81378971,81969972,82554935,83167319,83756878,84355104,84932684,85514714,86514714,87096899,87687900,88270155,88861596,89472688,90058198,90657225,91243661,91814352,92814352,93398486,93983449,94574890,95157457,95770736,96358957,96961124,97534407,98119652,99119652,99721770,100334154,100945246,101558525,102159383,102777470,103403914,104012150,104619366,105619366,106204006,106793565,107379075,107967296,108585383,109171779,109780338,110364121,110942600,111942600,112531204,113129430,113728457,114330624,114957068,115565627,116160418,116760079,117360797,118360797,118938451,119516031,120102467,120675750,121283986,121867769,122467430,123034949,123618883,124618883,125191275,125773305,126343996,126929241,127536457,128114936,128715654,129299588,129867303,130867303,131867303,132867303,133867303,134867303,135867303,136867303,137867303,138867303,139867303,140867303,141450944,142039730,142630731,143215694,143828078,144417637,145015863,145593443,146175473,147175473,147764259,148354340,148950310,149534847,150152214,150743323,151346980,151922490,152508886,153508886,154099887,154695857,155286785,155879410,156501542,157091620,157701298,158288288,158868604,159868604,160453567,161038104,161630729,162210271,162825757,163413439,164017791,164589828,165177616,166177616,166790000,167407367,168029499,168644985,169257208,169879820,170516103,171124268,171741636,172741636,173331195,173922304,174512382,175100064,175722676,176310904,176923377,177506112,178088433,179088433,179686659,180290316,180899994,181504346,182140629,182753102,183357286,183957649,184567578,185567578,186145158,186720668,187307658,187879695,188487860,189070595,189670958,190237681,190822975,191822975,192405005,192991401,193571717,194159505,194776873,195359194,195969123,196554417,197130768,198130768,199130768,200130768,201130768,202130768,203130768,204130768,205130768,206130768,207130768,208130768,208712953,209303954,209886209,210477650,211088742,211674252,212273279,212859715,213430406,214430406,215021407,215617377,216208305,216800930,217423062,218013140,218622818,219209808,219790124,220790124,221372379,221963307,222540862,223132615,223745514,224328162,224931032,225519260,226088342,227088342,227679783,228272408,228864161,229454638,230078423,230668605,231282681,231866494,232450475,233450475,234061567,234683699,235296598,235920383,236534625,237155054,237793715,238413625,239019236,240019236,240604746,241194824,241777472,242367654,242988083,243572259,244183886,244770446,245347818,246347818,246946845,247556523,248159393,248773469,249412130,250023757,250633256,251245752,251846361,252846361,253432797,254019787,254608015,255191828,255811738,256398298,257010794,257590640,258175006,259175006,259745697,260326013,260895095,261479076,262084687,262662059,263262668,263847034,264413912,265413912,266413912,267413912,268413912,269413912,270413912,271413912,272413912,273413912,274413912,275413912,275998046,276583009,277174450,277757017,278370296,278958517,279560684,280133967,280719212,281719212,282304175,282888712,283481337,284060879,284676365,285264047,285868399,286440436,287028224,288028224,288619665,289212290,289804043,290394520,291018305,291608487,292222563,292806376,293390357,294390357,294972924,295552466,296142943,296718459,297330742,297916180,298519738,299088168,299674728,300674728,301288007,301903493,302527278,303139561,303755304,304377987,305014868,305618081,306237755,307237755,307825976,308413658,309003840,309589278,310211961,310799274,311414496,311995196,312581465,313581465,314183632,314787984,315402060,316005618,316642499,317257721,317867675,318465373,319079251,320079251,320652534,321224571,321808384,322376814,322980027,323560727,324158425,324722561,325306726,326306726,326891971,327479759,328063740,328650300,329269974,329856243,330470121,331054286,331635763,332635763,333635763,334635763,335635763,336635763,337635763,338635763,339635763,340635763,341635763,342635763,343237881,343850265,344461357,345074636,345675494,346293581,346920025,347528261,348135477,349135477,349747861,350365228,350987360,351602846,352215069,352837681,353473964,354082129,354699497,355699497,356310589,356932721,357545620,358169405,358783647,359404076,360042737,360662647,361268258,362268258,362881537,363497023,364120808,364733091,365348834,365971517,366608398,367211611,367831285,368831285,369432143,370044366,370658608,371274351,371873272,372497893,373129607,373743459,374359941,375359941,375978028,376600640,377221069,377843752,378468373,379088899,379732162,380347415,380958611,381958611,382585055,383221338,383859999,384496880,385128594,385771857,386399248,387026385,387656515,388656515,389264751,389872916,390492826,391096039,391709891,392325144,392952281,393546371,394160420,395160420,395767636,396385004,396990615,397610289,398226771,398837967,399468097,400082146,400677786,401677786,402677786,403677786,404677786,405677786,406677789,1038307589,1039307589,1040307589,1041307589,1042307589,1043307589,1044307589,1045307589,1046307589,1047307589,1048307589,1049307589,1050307589,1051307589,1052307589,1053307589,1054307589,1055307589,1056307589,1057307589,1058307589,1059307589,1060307589,1061307589,1062307589,1063307589,1064307589,1065307589,1066307589,1067307589,1068307589,1069307589,1070307589,1071307589,1072307589,1073307589,1074307589,1075307589,1076307589,1077307589,1078307589,1079307589,1080307589,1081307589,1082307589,1083307589,1084307589,1085307589,1086307589,1087307589,1088307589,1089307589,1090307589,1091307589,1092307589,1093307589,1094307589,1095307589,1096307589,1097307589,1098307589,1099307589,1100307589,1101307589,1102307589,1103307589,1104307589,1105307589,1106307589,1107307589,1108307589,1109307589,1110307589,1111307589,1112307589,1113307589,1114307589,1115307589,1116307589,1117307589,1118307589,1119307589,1120307589,1121307589,1122307589,1123307589,1124307589,1125307589,1126307589,1127307589,1128307589,1129307589,1130307589,1131307589,1132307589,1133307589,1134307589,1135307589,1136307589,1137307589,1138307589,1139307589,1140307589,1141307589,1142307589,1143307589,1144307589,1145307589,1146307589,1147307589,1148307589,1149307589,1150307589,1151307589,1152307589,1153307589,1154307589,1155307589,1156307589,1157307589,1158307589,1159307589,1160307589,1161307589,1162307589,1163307589,1164307589,1165307589,1166307589,1167307589,1168307589,1169307589,1170307589,1171307589,1172307589,1173307589,1174307589,1175307589,1176307589,1177307589,1178307589,1179307589,1180307589,1181307589,1182307589,1183307589,1184307589,1185307589,1186307589,1187307589,1188307589,1189307589,1190307589,1191307589,1192307589,1193307589,1194307589,1195307589,1196307589,1197307589,1198307589,1199307589,1200307589,1201307589,1202307589,1203307589,1204307589,1205307589,1206307589,1207307589,1208307589,1209307589,1210307589,1211307589,1212307589,1213307589,1214307589,1215307589,1216307589,1217307589,1218307589,1219307589,1220307589,1221307589,1222307589,1223307589,1224307589,1225307589,1226307589,1227307589,1228307589,1229307589,1230307589,1231307589,1232307589,1233307589,1234307589,1235307589,1236307589,1237307589,1238307589,1239307589,1240307589,1241307589,1242307589,1243307589,1244307589,1245307589,1246307589,1247307589,1248307589,1249307589,1250307589,1251307589,1252307589,1253307589,1254307589,1255307589,1256307589,1257307589,1258307589,1259307589,1260307589,1261307589,1262307589,1263307589,1264307589,1265307589,1266307589,1267307589,1268307589,1269307589,1270307589,1271307589,1272307589,1273307589,1274307589,1275307589,1276307589,1277307589,1278307589,1279307589,1280307589,1281307589,1282307589,1283307589,1284307589,1285307589,1286307589,1287307589,1288307589,1289307589,1290307589,1291307589,1292307589,1293307589,1294307589,1295307589,1296307589,1297307589,1298307589,1299307589,1300307589,1301307589,1302307589,1303307589,1304307589,1305307589,1306307589,1307307589,1308307589,1309307589,1310307589,1311307589,1312307589,1313307589,1314307589,1315307589,1316307589,1317307589,1318307589,1319307589,1320307589,1321307589,1322307589,1323307589,1324307589,1325307589,1326307589,1327307589,1328307589,1329307589,1330307589,1331307589,1332307589,1333307589,1334307589,1335307589,1336307589,1337307589,1338307589,1339307589,1340307589,1341307589,1342307589,1343307589,1344307589,1345307589,1346307589,1347307589,1348307589,1349307589,1350307589,1351307589,1352307589,1353307589,1354307589,1355307589,1356307589,1357307589,1358307589,1359307589,1360307589,1361307589,1362307589,1363307589,1364307589,1365307589,1366307589,1367307589,1368307589,1369307589,1370307589,1371307589,1372307589,1373307589,1374307589,1375307589,1376307589,1377307589,1378307589,1379307589,1380307589,1381307589,1382307589,1383307589,1384307589,1385307589,1386307589,1387307589,1388307589,1389307589,1390307589,1391307589,1392307589,1393307589,1394307589,1395307589,1396307589,1397307589,1398307589,1399307589,1400307589,1401307589,1402307589,1403307589,1404307589,1405307589,1406307589,1407307589,1408307589,1409307589,1410307589,1411307589,1412307589,1413307589,1414307589,1415307589,1416307589,1417307589,1418307589,1419307589,1420307589,1421307589,1422307589,1423307589,1424307589,1425307589,1426307589,1427307589,1428307589,1429307589,1430307589,1431307589,1432307589,1433307589,1434307589,1435307589,1436307589,1437307589,1438307589,1439307589,1440307589,1441307589,1442307589,1443307589,1444307589,1445307589,1446307589,1447307589,1448307589,1449307589,1450307589,1451307589,1452307589,1453307589,1454307589,1455307589,1456307589,1457307589,1458307589,1459307589,1460307589,1461307589,1462307589,1463307589,1464307589,1465307589,1466307589,1467307589,1468307589,1469307589,1470307589,1471307589,1472307589,1473307589,1474307589,1475307589,1476307589,1477307589,1478307589,1479307589,1480307589,1481307589,1482307589,1483307589,1484307589,1485307589,1486307589,1487307589,1488307589,1489307589,1490307589,1491307589,1492307589,1493307589,1494307589,1495307589,1496307589,1497307589,1498307589,1499307589,1500307589,1501307589,1502307589,1503307589,1504307589,1505307589,1506307589,1507307589,1508307589,1509307589,1510307589,1511307589,1512307589,1513307589,1514307589,1515307589,1516307589,1517307589,1518307589,1519307589,1520307589,1521307589,1522307589,1523307589,1524307589,1525307589,1526307589,1527307589,1528307589,1529307589,1530307589,1531307589,1532307589,1533307589,1534307589,1535307589,1536307589,1537307589,1538307589,1539307589,1540307589,1541307589,1542307589,1543307589,1544307589,1545307589,1546307589,1547307589,1548307589,1549307589,1550307589,1551307589,1552307589,1553307589,1554307589,1555307589,1556307589,1557307589,1558307589,1559307589,1560307589,1561307589,1562307589,1563307589,1564307589,1565307589,1566307589,1567307589,1568307589,1569307589,1570307589,1571307589,1572307589,1573307589,1574307589,1575307589,1576307589,1577307589,1578307589,1579307589,1580307589,1581307589,1582307589,1583307589,1584307589,1585307589,1586307589,1587307589,1588307589,1589307589,1590307589,1591307589,1592307589,1593307589,1594307589,1595307589,1596307589,1597307589,1598307589,1599307589,1600307589,1601307589,1602307589,1603307589,1604307589,1605307589,1606307589,1607307589,1608307589,1609307589,1610307589,1611307589,1612307589,1613307589,1614307589,1615307589,1616307589,1617307589,1618307589,1619307589,1620307589,1621307589,1622307589,1623307589,1624307589,1625307589,1626307589,1627307589,1628307589,1629307589,1630307589,1631307589,1632307589,1633307589,1634307589,1635307589,1636307589,1637307589,1638307589,1639307589,1640307589,1641307589,1642307589,1643307589,1644307589,1645307589,1646307589,1647307589,1648307589,1649307589,1650307589,1651307589,1652307589,1653307589,1654307589,1655307589,1656307589,1657307589,1658307589,1659307589,1660307589,1661307589,1662307589,1663307589,1664307589,1665307589,1666307589,1667307589,1668307589,1669307589,1670307589,1671307589,1672307589,1673307589,1674307589,1675307589,1676307589,1677307589,1678307589,1679307589,1680307589,1681307589,1682307589,1683307589,1684307589,1685307589,1686307589,1687307589,1688307589,1689307589,1690307589,1691307589,1692307589,1693307589,1694307589,1695307589,1696307589,1697307589,1698307589,1699307589,1700307589,1701307589,1702307589,1703307589,1704307589,1705307589,1706307589,1707307589,1708307589,6,407677786,408677786,409677786,410677786,411677786,412262426,412851985,413437495,414025716,414643803,415230199,415838758,416422541,417001020,418001020,418590579,419181688,419771766,420359448,420982060,421570288,422182761,422765496,423347817,424347817,424933327,425523405,426106053,426696235,427316664,427900840,428512467,429099027,429676399,430676399,431264620,431852302,432442484,433027922,433650605,434237918,434853140,435433840,436020109,437020109,437638196,438260808,438881237,439503920,440128541,440749067,441392330,442007583,442618779,443618779,444205175,444793403,445377579,445964892,446585418,447170489,447784127,448368759,448949063,449949063,450557622,451170095,451781722,452396944,453040207,453653845,454271485,454881757,455488632,456488632,457072415,457655150,458241710,458822410,459437663,460022295,460632567,461209381,461794016,462794016,463372495,463954816,464532188,465118457,465729653,466309957,466916832,467501467,468074642,469074642,470074642,471074642,472074642,473074642,474074642,475074642,476074642,477074642,478074642,479074642,479663246,480261472,480860499,481462666,482089110,482697669,483292460,483892121,484492839,485492839,486091065,486694722,487304400,487908752,488545035,489157508,489761692,490362055,490971984,491971984,492571011,493180689,493783559,494397635,495036296,495647923,496257422,496869918,497470527,498470527,499072694,499677046,500291122,500894680,501531561,502146783,502756737,503354435,503968313,504968313,505594757,506231040,506869701,507506582,508138296,508781559,509408950,510036087,510666217,511666217,512274776,512887249,513498876,514114098,514757361,515370999,515988639,516598911,517205786,518205786,518800577,519404761,520014260,520624214,521251605,521869245,522460647,523067393,523676107,524676107,525275768,525876131,526488627,527086325,527713462,528323734,528930480,529522600,530134016,531134016,531734734,532344663,532945272,533559150,534189280,534796155,535404869,536016285,536609809,537609809,538609809,539609809,540609809,541609809,542609809,543609809,544609809,545609809,546609809,547609809,548187463,548765043,549351479,549924762,550532998,551116781,551716442,552283961,552867895,553867895,554445475,555020985,555607975,556180012,556788177,557370912,557971275,558537998,559123292,560123292,560709728,561296718,561884946,562468759,563088669,563675229,564287725,564867571,565451937,566451937,567025220,567597257,568181070,568749500,569352713,569933413,570531111,571095247,571679412,572679412,573287648,573895813,574515723,575118936,575732788,576348041,576975178,577569268,578183317,579183317,579767100,580349835,580936395,581517095,582132348,582716980,583327252,583904066,584488701,585488701,586088362,586688725,587301221,587898919,588526056,589136328,589743074,590335194,590946610,591946610,592514129,593080852,593660698,594224834,594818924,595395738,595987858,596548563,597130992,598130992,598714926,599300220,599884586,600468751,601082800,601667435,602278851,602861280,603442754,604442754,605442754,606442754,607442754,608442754,609442754,610442754,611442754,612442754,613442754,614442754,615015146,615597176,616167867,616753112,617360328,617938807,618539525,619123459,619691174,620691174,621273204,621859600,622439916,623027704,623645072,624227393,624837322,625422616,625998967,626998967,627569658,628149974,628719056,629303037,629908648,630486020,631086629,631670995,632237873,633237873,633823118,634410906,634994887,635581447,636201121,636787390,637401268,637985433,638566910,639566910,640174126,640791494,641397105,642016779,642633261,643244457,643874587,644488636,645084276,646084276,646662755,647245076,647822448,648408717,649019913,649600217,650207092,650791727,651364902,652364902,652965620,653575549,654176158,654790036,655420166,656027041,656635755,657247171,657840695,658840695,659424629,660009923,660594289,661178454,661792503,662377138,662988554,663570983,664152457,665152457,665720172,666296523,666863401,667444878,668040518,668613693,669207217,669788691,670349658,671349658,672349658,673349658,674349658,675349658,676349658,677349658,678349658,679349658,680349658,681349658,682349658,683349658,684349658,685349658,686349658,687349658,688349658,689349658,690349658,691349658,692349658,693349658,694349658,695349658,696349658,697349658,698349658,699349658,700349658,701349658,702349658,703349658,704349658,705349658,706349658,707349658,708349658,709349658,710349658,711349658,712349658,713349658,714349658,715349658,716349658,717349658,718349658,719349658,720349658,721349658,722349658,723349658,724349658,725349658,726349658,727349658,728349658,729349658,730349658,731349658,732349658,733349658,734349658,735349658,736349658,737349658,738349658,739349658,740349658,741349658,742349658,743349658,744349658,745349658,746349658,747349658,748349658,749349658,750349658,751349658,752349658,753349658,754349658,755349658,756349658,757349658,758349658,759349658,760349658,761349658,762349658,763349658,764349658,765349658,766349658,767349658,768349658,769349658,770349658,771349658,772349658,773349658,774349658,775349658,776349658,777349658,778349658,779349658,780349658,781349658,781921746,782502752,783082891,783664968,784265620,784848081,785436506,786011830,786584454,787584454,788165460,788749594,789337992,789921863,790530968,791117465,791714452,792289296,792869350,793869350,794449489,795037887,795618763,796208322,796818679,797402057,798001844,798587304,799157829,800157829,800739906,801323777,801913336,802491927,803104047,803690483,804291079,804863095,805446653,806446653,807047305,807656410,808266767,808878887,809479408,810094448,810718504,811325727,811930957,812930957,813513418,814099915,814683293,815269729,815884769,816470014,817076181,817658670,818235145,819235145,819823570,820420557,821020344,821620940,822244996,822851163,823444961,824044784,824643436,825643436,826218760,826793604,827379064,827951080,828558303,829140792,829740615,830307338,830892302,831892302,832464926,833044980,833615505,834199063,834804293,835380768,835979420,836564384,837129961,838129961,839129961,840129961,841129961,842129961,843129961,844129961,845129961,846129961,847129961,848129961,848710967,849295101,849883499,850467370,851076475,851662972,852259959,852834803,853414857,854414857,854998991,855583954,856175395,856757962,857371241,857959462,858561629,859134912,859720157,860720157,861308555,861899996,862488290,863079399,863698220,864285996,864894494,865479506,866057526,867057526,867641397,868223964,868815073,869392653,870006037,870593027,871195847,871766400,872352012,873352012,873961117,874574396,875193217,875806601,876415770,877036365,877668697,878273790,878887480,879887480,880473977,881062198,881649974,882236964,882857559,883445347,884057702,884639528,885222656,886222656,886819643,887421810,888030308,888633128,889265460,889877815,890480573,891079852,891687262,892687262,893262106,893835389,894420401,894990954,895596047,896177873,896777152,897342172,897926748,898926748,899506802,900092047,900670067,901255679,901869369,902452497,903059907,903644483,904219141,905219141,906219141,907219141,908219141,909219141,910219141,911219141,912219141,913219141,914219141,915219141,915799280,916387678,916968554,917558113,918168470,918751848,919351635,919937095,920507620,921507620,922096018,922687459,923275753,923866862,924485683,925073459,925681957,926266969,926844989,927844989,928425865,929014159,929590927,930181005,930793088,931373709,931976644,932564432,933132894,934132894,934722453,935313562,935903640,936491322,937113934,937702162,938314635,938897370,939479691,940479691,941090048,941708869,942320952,942943564,943557238,944174142,944809859,945429305,946031685,947031685,947615063,948202839,948783460,949371688,949988592,950572573,951181823,951767568,952343119,953343119,953942906,954551404,955154339,955766812,956402529,957011779,957619695,958232549,958830055,959830055,960415515,961000527,961588315,962171050,962790496,963376241,963989095,964568216,965153542,966153542,966724067,967302087,967870549,968452870,969055250,969630801,970228307,970813633,971377482,972377482,973377482,974377482,975377482,976377482,977377482,978377482,979377482,980377482,981377482,982377482,982959559,983543430,984132989,984711580,985323700,985910136,986510732,987082748,987666306,988666306,989250177,989832744,990423853,991001433,991614817,992201807,992804627,993375180,993960792,994960792,995550351,996141460,996731538,997319220,997941832,998530060,999142533,999725268,1000307589,1001307589,1002307589,1003307589,1004307589,1005307589,1006307589,1007307589,1008307589,1009307589,1010307589,1011307589,1012307589,1013307589,1014307589,1015307589,1016307589,1017307589,1018307589,1019307589,1020307589,1021307589,1022307589,1023307589,1024307589,1025307589,1026307589,1027307589,1028307589,1029307589,1030307589,1031307589,1032307589,1033307589,1034307589,1035307589,1036307589,103730758};

FastOutput fo;

int main()
{
    uint ct = 0;
    int maxi = 10001;
    int ind = 0;
    //debug("ct", ct);
    /*
    REP(i1, 10)
    {
	REP(i2, 10)
	{
	    REP(i3, 10)
	    {
		REP(i4, 10)
		{
		    int p;
		    if(i1) p = i1*i2*i3*i4;
		    else if(i2) p = i2*i3*i4;
		    else if(i3) p = i3*i4;
		    else if(i4) p = i4;
		    else p=1;
		    int s = i1 + i2 + i3 + i4;
		    if(i1 || i2 || i3 || i4)
		    {
			ct += above000(p, s, 10000000);
		    }else
		    {
			ct += under000(p, s, 10000000);
		    }
		    fo.PrintUint(ct, ',');
		    if(ct > 1000000000)
		    {
			break;
		    }
		}
	    }
	}
    }*/
    while(maxi--)
    {
	int n;
	scanf("%u", &n);
	if(n==0) break;
	uint s = 0;
	uint i = 0;
	//debug(n);
	while(s < n) 
	{
	    s += hash[i];
	    i++;
	    //debug(s, i);
	}
	i--;
	int r = i;
	int i1 = i%10; i/=10;
	int i2 = i%10; i/=10;
	int i3 = i%10; i/=10;
	int i4 = i%10;
	int p;
	if(i1)      p = i1*i2*i3*i4;
	else if(i2) p = i2*i3*i4;
	else if(i3) p = i3*i4;
	else if(i4) p = i4;
	else p = 1;
	//debug(r);
	int prev = (r==0)?(0):(s - hash[r]);
	if(i==0)
	    fo.PrintUint(r*1000000 + under000(p, i1+i2+i3+i4, n-prev), '\n');
	else
	    fo.PrintUint(r*1000000 + above000(p, i1+i2+i3+i4, n-prev), '\n');
	}
    //printf("%u\n", cnt);
    fo.Flush();
    return 0;
}
